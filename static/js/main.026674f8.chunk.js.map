{"version":3,"sources":["components/MapWithGroundOverlay.js","components/AdjustableGroundoverlay.js","App.js","serviceWorker.js","index.js"],"names":["MapWithGroundOverlay","compose","withScriptjs","withGoogleMap","props","react_default","a","createElement","lib","defaultZoom","defaultCenter","lat","lng","defaultUrl","defaultBounds","google","maps","LatLngBounds","LatLng","opacity","AdjustableGroundoverlay","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleChange","bind","assertThisInitialized","event","value","setState","Grid","container","spacing","item","xs","googleMapURL","concat","process","loadingElement","style","height","containerElement","mapElement","Paper","className","classes","paper","Box","flexDirection","FormLabel","label","mt","Slider","min","max","onChange","React","PureComponent","withStyles","theme","padding","textAlign","color","palette","text","secondary","require","config","App","CssBaseline","Container","components_AdjustableGroundoverlay","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iUAUaA,EAAuBC,YAClCC,eACAC,gBAFkCF,CAGlC,SAAAG,GAAK,OACLC,EAAAC,EAAAC,cAACC,EAAA,UAAD,CACEC,YAAa,GACbC,cAAe,CAACC,IAAK,MAAQC,KAAM,QAEnCP,EAAAC,EAAAC,cAACC,EAAA,cAAD,CACEK,WAAW,gEACXC,cAAe,IAAIC,OAAOC,KAAKC,aAC7B,IAAIF,OAAOC,KAAKE,OAAO,WAAY,UACnC,IAAIH,OAAOC,KAAKE,OAAO,WAAY,WAErCC,QAASf,EAAMe,kECJfC,cACJ,SAAAA,EAAYhB,EAAOiB,GAAS,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAC1BE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMrB,EAAOiB,KACRQ,MAAQ,CAACV,QAAS,IACvBG,EAAKQ,aAAeR,EAAKQ,aAAaC,KAAlBR,OAAAS,EAAA,EAAAT,CAAAD,IAHMA,4EAMfW,EAAOC,GAClBT,KAAKU,SAAS,SAAAN,GAAK,MAAK,CACtBV,QAASe,sCAKX,OACE7B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACvBjC,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACbnC,EAAAC,EAAAC,cAACP,EAAD,CACEyC,aAAY,+CAAAC,OAAiDC,0CAAjD,8CACZC,eAAgBvC,EAAAC,EAAAC,cAAA,OAAKsC,MAAO,CAAEC,OAAM,UACpCC,iBAAkB1C,EAAAC,EAAAC,cAAA,OAAKsC,MAAO,CAAEC,OAAM,WACtCE,WAAY3C,EAAAC,EAAAC,cAAA,OAAKsC,MAAO,CAAEC,OAAM,UAChC3B,QAASM,KAAKI,MAAMV,WAGxBd,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACbnC,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAOC,UAAWzB,KAAKrB,MAAM+C,QAAQC,OACnC/C,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CAAKC,cAAc,UACjBjD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAWL,UAAWzB,KAAKrB,MAAM+C,QAAQK,OAAzC,mBACAnD,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CAAKI,GAAI,GACPpD,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CACExB,MAAOT,KAAKI,MAAMV,QAClBwC,IAAK,EACLC,IAAK,EACLC,SAAUpC,KAAKK,2BAlCKgC,IAAMC,eAiD7BC,cA3DA,SAAAC,GAAK,MAAK,CACvBb,MAAO,CACLc,QAASD,EAAM3B,QAAQ,MAEzBkB,MAAO,CACLW,UAAW,SACXC,MAAOH,EAAMI,QAAQC,KAAKC,aAqDfP,CAAmB5C,GC/DlCoD,EAAQ,KAAUC,SAaHC,MAXf,WACE,OACErE,EAAAC,EAAAC,cAAA,OAAK2C,UAAU,OACb7C,EAAAC,EAAAC,cAACoE,EAAA,EAAD,MACAtE,EAAAC,EAAAC,cAACqE,EAAA,EAAD,KACEvE,EAAAC,EAAAC,cAACsE,EAAD,SCDYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/E,EAAAC,EAAAC,cAAC8E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.026674f8.chunk.js","sourcesContent":["/* global google */\n\nimport React from 'react'\nimport { compose } from 'recompose'\nimport {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  GroundOverlay } from 'react-google-maps'\n\nexport const MapWithGroundOverlay = compose(\n  withScriptjs,\n  withGoogleMap\n)(props =>\n  <GoogleMap\n    defaultZoom={12}\n    defaultCenter={{lat: 40.740, lng: -74.18}}\n  >\n    <GroundOverlay\n      defaultUrl=\"https://www.lib.utexas.edu/maps/historical/newark_nj_1922.jpg\"\n      defaultBounds={new google.maps.LatLngBounds(\n        new google.maps.LatLng(40.712216, -74.22655),\n        new google.maps.LatLng(40.773941, -74.12544)\n      )}\n      opacity={props.opacity}\n    />\n  </GoogleMap>\n);\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { MapWithGroundOverlay } from './MapWithGroundOverlay'\nimport { withStyles } from '@material-ui/core/styles'\nimport Box from '@material-ui/core/Box'\nimport FormLabel from '@material-ui/core/FormLabel'\nimport Slider from '@material-ui/lab/Slider'\nimport Grid from '@material-ui/core/Grid'\nimport Paper from '@material-ui/core/Paper'\n\nconst styles = theme => ({\n  paper: {\n    padding: theme.spacing(1.5),\n  },\n  label: {\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n})\n\nclass AdjustableGroundoverlay extends React.PureComponent {\n  constructor(props, context) {\n    super(props, context)\n    this.state = {opacity: 0.5}\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event, value) {\n    this.setState(state => ({\n      opacity: value\n    }));\n  }\n\n  render() {\n    return (\n      <Grid container spacing={1}>\n        <Grid item xs={12}>\n          <MapWithGroundOverlay\n            googleMapURL={`https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}&v=3.exp&libraries=geometry,drawing,places`}\n            loadingElement={<div style={{ height: `100%` }} />}\n            containerElement={<div style={{ height: `600px` }} />}\n            mapElement={<div style={{ height: `100%` }} />}\n            opacity={this.state.opacity}\n          />\n        </Grid>\n        <Grid item xs={6}>\n          <Paper className={this.props.classes.paper}>\n            <Box flexDirection=\"column\">\n              <FormLabel className={this.props.classes.label}>Overlay Opacity</FormLabel>\n              <Box mt={1}>\n                <Slider\n                  value={this.state.opacity}\n                  min={0}\n                  max={1}\n                  onChange={this.handleChange}\n                />\n              </Box>\n            </Box>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nAdjustableGroundoverlay.propTypes = {\n  classes: PropTypes.object.isRequired,\n}\n\nexport default withStyles(styles)(AdjustableGroundoverlay)\n","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport './App.css';\nimport AdjustableGroundoverlay from './components/AdjustableGroundoverlay'\n\nrequire('dotenv').config()\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CssBaseline/>\n      <Container>\n        <AdjustableGroundoverlay/>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}